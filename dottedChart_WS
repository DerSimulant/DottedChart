import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# CSV-Datei mit dem richtigen Trennzeichen und nur benötigten Spalten einlesen
#df_csv = pd.read_csv('EventlogRepair.csv', usecols=['time:timestamp', 'case:concept:name', 'concept:name'], encoding="ISO-8859-1", delimiter=';')
df_csv = pd.read_csv('updated_aristest.csv', usecols=['time:timestamp', 'case:concept:name', 'concept:name'], encoding="ISO-8859-1", delimiter=',')

# Das Zeitformat korrigieren
df_csv['time:timestamp'] = pd.to_datetime(df_csv['time:timestamp'])

# Ein Dictionary erstellen, um jedem Ereignis eine Farbe zuzuordnen
unique_events_csv = df_csv['concept:name'].unique()
colors_csv = plt.cm.jet(np.linspace(0, 1, len(unique_events_csv)))
event_color_map_csv = dict(zip(unique_events_csv, colors_csv))

# Daten für das Scatter-Plot vorbereiten
timestamps = df_csv['time:timestamp']
cases = df_csv['case:concept:name']
colors = df_csv['concept:name'].map(event_color_map_csv)

# Diagramm erstellen
fig, ax = plt.subplots(figsize=(12, 8))
scatter = ax.scatter(timestamps, cases, c=colors, s=10)

# Legende anzeigen
unique_labels_csv = {k: plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=v, markersize=10) for k, v in event_color_map_csv.items()}
ax.legend(unique_labels_csv.values(), unique_labels_csv.keys(), loc="upper left", bbox_to_anchor=(1,1), ncol=1)

ax.set_xlabel('Zeit')
ax.set_ylabel('Cases')
ax.set_title('Dotted Chart')

# Y-Achse invertieren
ax.invert_yaxis()

plt.tight_layout()
plt.show()
